<?php

// 0. Debugging info
$t1 = microtime(1);
$m1 = memory_get_usage();
chdir(dirname(__FILE__));

// 1. Preliminary settings

date_default_timezone_set('Europe/Stockholm');
include_once 'vendor/colinmollenhour/credis/Client.php';


// 2. Load namespaces

$coursioLoaderClassMap = array();

$coursioLoaderPrefixesPsr0 = array
(
    'App\\'         => '.',

    // 3rd parties
//    'Predis'        => 'vendor/predis/predis/lib',
    'Resque'        => 'vendor/chrisboulton/php-resque/lib',
    'Mandrill'      => 'vendor/mandrill/mandrill/src',
//    'PHPExcel'      => 'vendor/os/php-excel/PHPExcel',
    'Psr\\Log'      => 'vendor/psr/log',
);

spl_autoload_register(function($class) use ($coursioLoaderClassMap, $coursioLoaderPrefixesPsr0)
{
    // class map lookup
    if (isset ($coursioLoaderClassMap[$class]))
    {
        if ($coursioLoaderClassMap[$class])
        {
            include_once $coursioLoaderClassMap[$class];
        }
        else
        {
            return false;
        }
    }

    if (strpos($class, '\\') === false && file_exists('boosters/' . $class . '.php'))
    {
        include_once 'boosters/' . $class . '.php';
        return true;
    }

    foreach ($coursioLoaderPrefixesPsr0 as $namespace => $dir)
    {
        if (0 === strpos($class, $namespace))
        {
            if (strpos($class, '_'))
            {
                $class = strtr(strtr($class, $namespace . '_', ''), '_', '/');
            }

            if (!file_exists($path = $dir . '/' . strtr($class, '\\', '/') . '.php'))
            {
                $path = str_replace($namespace . '/' . $namespace, $namespace, $path);
            }

            include_once $path;
            return true;
        }
    }

    // Remember that this class does not exist.
    return $coursioLoaderClassMap[$class] = false;

}, true, true);


// 3. Cleanup

unset ($coursioLoaderPrefixesPsr0);
unset ($coursioLoaderClassMap);


// 4. Run application

if ($argc < 2)
{
    system('clear');

    echo
    "\033[0;34m\n";

    echo
    "\033[0;32m" .
    "Available commands:\n" .
    "listen                Start the 'Worker' service. NB: app will not exit!\n" .
    "list all              List all available jobs\n" .
    "status [JOB ID]       Show job status\n" .
    "run [JOB] [JSON]      Run the job\n" .
    "test [JOB]            Run the job with a built-in test\n" .
    "push [JOB] [JSON]     Push the job\n" .

    "\033[0m\n";

    return;
}

$worker = new \App\Model\Worker(require_once 'App/config.php');

if ($argv[1] == 'listen')
{
    $worker->listen();
}
else if ($argv[1] == 'list' && $argv[2] == 'all')
{
    echo $worker->listAllJobs();
}
else if ($argv[1] == 'status')
{
    echo $worker->getJobStatus($argv[2]);
}
else if ($argv[1] == 'run')
{
    echo $worker->runJob($argv[2], $argv[3]);
}
else if ($argv[1] == 'push')
{
    echo $worker->pushJob($argv[2], $argv[3]);
}
else if ($argv[1] == 'test')
{
    echo $worker->testJob($argv[2]);
}
else
{
    echo "Unknown command '{$argv[1]}'.\n\n";
}
