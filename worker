<?php

// 0. Debugging info
$t1 = microtime(1);
$m1 = memory_get_usage();
chdir(dirname(__FILE__));

// 1. Preliminary settings

date_default_timezone_set('Europe/Stockholm');
include_once 'vendor/colinmollenhour/credis/Client.php';


// 2. Load namespaces

$loaderClassMap = [];

$autoClasses0 =
[
    'App\\'         => '.',

    // 3rd parties
    'Resque'        => 'vendor/chrisboulton/php-resque/lib',
    'Google'        => 'vendor/google/apiclient/src',
    'SecurityLib'   => 'vendor/ircmaxell/security-lib/lib',
    'RandomLib'     => 'vendor/ircmaxell/random-lib/lib',
    'Mandrill'      => 'vendor/mandrill/mandrill/src',
    'Psr\\Log'      => 'vendor/psr/log',
];

$autoClasses4 =
[
    'League\\OAuth2\\Client\\'  => ['vendor/league/oauth2-client/src/', 'vendor/league/oauth2-google/src/'],
    'Psr\\Http\\Message\\'      => 'vendor/psr/http-message/src/',
    'GuzzleHttp\\Psr7\\'        => 'vendor/guzzlehttp/psr7/src/',
    'GuzzleHttp\\Promise\\'     => 'vendor/guzzlehttp/promises/src/',
    'GuzzleHttp\\'              => 'vendor/guzzlehttp/guzzle/src/',
];

spl_autoload_register(function($class) use ($loaderClassMap, $autoClasses0, $autoClasses4)
{
    // class map lookup
    if (isset ($loaderClassMap[$class]))
    {
        if ($loaderClassMap[$class])
        {
            include_once $loaderClassMap[$class];
            return true;
        }
        else
        {
            return false;
        }
    }

    if (strpos($class, '\\') === false && file_exists('boosters/' . $class . '.php'))
    {
        include_once 'boosters/' . $class . '.php';
        return true;
    }

    foreach ($autoClasses0 as $namespace => $dir)
    {
        if (0 === strpos($class, $namespace))
        {
            if (strpos($class, '_'))
            {
                $class = strtr(strtr($class, $namespace . '_', ''), '_', '/');
            }

            include_once $dir . '/' . strtr($class, '\\', '/') . '.php';
            return true;
        }
    }

    //echo "Namespace = $namespace\n";
    //echo "Class = $class\n";

    foreach ($autoClasses4 as $namespace => $dir)
    {
        if (0 === strpos($class, $namespace))
        {
            if (is_array($dir))
            {
                foreach ($dir as $dirry)
                {
                    $file = $dirry . strtr(str_replace($namespace, '', $class), '\\', '/') . '.php';
                    if (file_exists($file))
                    {
                        include_once $file;
                        return true;
                    }
                }
            }
            else
            {
                include_once $dir . strtr(str_replace($namespace, '', $class), '\\', '/') . '.php';
                return true;
            }
        }
    }

    // Remember that this class does not exist.
    return $loaderClassMap[$class] = false;

}, true, true);


// 3. Cleanup

unset ($autoClasses0);
unset ($loaderClassMap);


// 4. Run application

if ($argc < 2)
{
    system('clear');

    echo
    "\033[0;34m\n";

    echo
    "\033[0;32m" .
    "Available commands:\n" .
    "listen                Start the 'Worker' service. NB: app will not exit!\n" .
    "list all              List all available jobs\n" .
    "status [JOB ID]       Show job status\n" .
    "run [JOB] [JSON]      Run the job\n" .
    "test [JOB]            Run the job with a built-in test\n" .
    "push [JOB] [JSON]     Push the job\n" .

    "\033[0m\n";

    return;
}

$worker = new \App\Model\Worker(require_once 'App/config.php');

if ($argv[1] == 'listen')
{
    $worker->listen();
}
else if ($argv[1] == 'list' && $argv[2] == 'all')
{
    echo $worker->listAllJobs();
}
else if ($argv[1] == 'status')
{
    echo $worker->getJobStatus($argv[2]);
}
else if ($argv[1] == 'run')
{
    echo $worker->runJob($argv[2], $argv[3]);
}
else if ($argv[1] == 'push')
{
    echo $worker->pushJob($argv[2], $argv[3]);
}
else if ($argv[1] == 'test')
{
    echo $worker->testJob($argv[2]);
}
else
{
    echo "Unknown command '{$argv[1]}'.\n\n";
}
